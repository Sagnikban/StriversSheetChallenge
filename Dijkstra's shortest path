#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &times, int n, int edges, int k) {
        vector<pair<int,int>>adj[n+1];
        for(auto it:times)
        {
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
            
        }
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        
        vector<int>dis(n,INT_MAX);
        
        dis[k]=0;
        pq.push({0,k});
        
        while(!pq.empty())
        {
           
            int curDist=pq.top().first;
            int curNode=pq.top().second;
            pq.pop();
           
          for(auto it:adj[curNode])
          {
              int nextNode=it.first;
              int nextdist=it.second+curDist;
              
              if(dis[nextNode]>nextdist)
              {
                  dis[nextNode]=nextdist;
                  pq.push({dis[nextNode],nextNode});
              }
           }
        
        
          }

        return dis;
}
