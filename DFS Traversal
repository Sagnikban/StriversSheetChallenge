void dfs(vector<int>&v,int i,vector<int>adj[],vector<int>&vis)
{
    vis[i]=true;
    v.push_back(i);
    for(auto it:adj[i])
    {
        if(!vis[it])
        dfs(v,it,adj,vis);
    }
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // Write your code here
    vector<int>adj[V+2];
    for(int i=0;i<E;i++)
    {
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    
    
    vector<int>vis(V+2,false);
    vector<vector<int>>ans;
    int c=0;
    for(int i=0;i<=V-1;i++)
    {
        
        if(!vis[i])
        {
           vector<int>v; 
           c++;
           dfs(v,i,adj,vis);
           ans.push_back(v);
        }
 
    }
    

    return ans;
}
